#pragma once
#include "Windows.h"
#include "RFunctions.h"

#define lua_pop(L,n)            settop(L, -(n)-1)


/* Addresses*/

const DWORD getfieldAddy = AddyScan(0x73A5C0);
const DWORD pushstringAddy = AddyScan(0x73B950);
const DWORD pushvalueAddy = AddyScan(0x73BA10);
const DWORD PCallAddy = AddyScan(0x73B380);
const DWORD SetfieldAddy = AddyScan(0x73C380);
const DWORD ScriptContextVFTable_Address = AddyScan(0x102D334);
const DWORD settop_Address = AddyScan(0x73C750);
const DWORD getmetatable_Address = AddyScan(0x73A890); 
const DWORD SEHChainCheck_Address = AddyScan(0x733597);
const DWORD pushnumber_Address = AddyScan(0x73B8C0);
const DWORD pushboolean_Address = AddyScan(0x73B450);
const DWORD pushniladdress = AddyScan(0x73B850);
const DWORD elevateok = AddyScan(0x15CB7A8);



/* Scan and luaState */
int SrtCont = ScanForScriptContext((char*)&ScriptContextVFTable_Address);
int luaState = (SrtCont + 56 * 0 + 164) ^ *(DWORD *)(SrtCont + 56 * 0 + 164);


/* Typedefs + call conventions updated */
typedef void(__stdcall* Lua_getfield)(int LuaState, int ID, const char* Field); 
Lua_getfield getfield = (Lua_getfield)CheckBypass(getfieldAddy);

typedef bool(__cdecl* Lua_pushboolean)(int LuaState, int Value);
Lua_pushboolean pushboolean = (Lua_pushboolean)CheckBypass(pushboolean_Address);

typedef void(__cdecl* Lua_pushnil)(int LuaState);
Lua_pushnil pushnil = (Lua_pushnil)CheckBypass(pushniladdress);

typedef int(__fastcall* Lua_getmetatable)(int LuaState, int ID);
Lua_getmetatable getmetatable = (Lua_getmetatable)CheckBypass(getmetatable_Address);

typedef void(__stdcall* Lua_pushnumber)(int LuaState, double Number);
Lua_pushnumber pushnumber = (Lua_pushnumber)CheckBypass(pushnumber_Address);

typedef int(__cdecl* Lua_pcall)(int LuaState, int NumberOfArguments, int NumberOfResults, int ErrorFunctionCallback);
Lua_pcall gg_pcall = (Lua_pcall)CheckBypass(PCallAddy);

typedef void(__fastcall* Lua_pushstring)(int LuaState, const char* String);
Lua_pushstring pushstring = (Lua_pushstring)CheckBypass(pushstringAddy);

typedef void(__stdcall* Lua_pushvalue)(int LuaState, int ID);
Lua_pushvalue pushvalue = (Lua_pushvalue)CheckBypass(pushvalueAddy);

typedef void(__cdecl* Lua_settop)(int LuaState, int ID);
Lua_settop settop = (Lua_settop)CheckBypass(settop_Address);



typedef void(__cdecl* Lua_SetField)(int LuaState, int ID, const char* Field);
Lua_SetField gg_setfield = (Lua_SetField)CheckBypass(SetfieldAddy);


/* Writes memory over the bypass */

void pcall(int LuaState, int NumberOfArguments, int NumberOfResults, int ErrorCallback) {

	WriteProcessMemory(GetCurrentProcess(), reinterpret_cast<void*>(SEHChainCheck_Address), "\xEB", 1, 0);
	gg_pcall(LuaState, NumberOfArguments, NumberOfResults, ErrorCallback);

	WriteProcessMemory(GetCurrentProcess(), reinterpret_cast<void*>(SEHChainCheck_Address), "\x74", 1, 0);
}






/* An alterative method to setfield*/


void rlua_setfield(int L, int idx, const char *k) {

	pushvalue(L, idx);
	if (getmetatable(L, -1)) {
		getfield(L, -1, "__newindex");
		pushvalue(L, -3);
		pushstring(L, k);
		pushvalue(L, -6);
		pcall(L, 3, 0, 0);
		lua_pop(L, 3);
	}
	else {
		lua_pop(L, 1);
		gg_setfield(L, idx, k);

	}

}

